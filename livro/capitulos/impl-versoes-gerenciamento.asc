== Gerenciando versões dos livros

Durante o ciclo de vida dos livros serão elaboradas diversas versões dos
livros, este capítulo descreve como gerenciar suas versões.


=== Sobre o versionamento dos livros

(((Versionamento)))


NOTE: A estratégia de versionamento dos livros foram baseados em
http://semver.org/spec/v2.0.0.html e https://medium.com/i-m-h-o/2aa5cff10010.

////
Referências sobre a edição:

http://www.teleread.com/ebooks/e-books-need-better-versioning-and-change-notification/
http://www.teleread.com/ebooks/e-books-good-for-fixing-mistakes/
http://newkindofbook.com/2011/04/update-at-page-11-letting-readers-know-about-ebook-revisions/
https://community.author-it.com/entries/23172716-Advice-on-versioning-books
http://sno2.iwarp.com/ebook-faq/documents/versioning.html


TODO: Ver https://leanpub.com/manifesto
self-publish
////


O número da edição evolui com o livro, a primeira edição, a segunda etc..
Mas quando lançar uma edição revisada ao invés de uma nova edição?

.Resumo da estratégia de versionamento
____
Summary

Given a version number MAJOR.MINOR.PATCH, increment the:

. MAJOR version when you make incompatible API changes,
. MINOR version when you add functionality in a backwards-compatible manner, and
. PATCH version when you make backwards-compatible bug fixes.

Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.
____

=== Antes de iniciar

[[sec_versao_config_teste]]
==== Testando a configuração

....
PROTOCOLO=`git config --get remote.origin.url`;\
PROJECT=`git config --get remote.origin.url | cut -f 2 -d / | cut -f 1 -d .`;\
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`;\
LIVRO_URL=`git config --get livro.url`;\
echo Protocolo $PROTOCOLO;\
echo Projeto $PROJECT;\
echo Edição $LIVRO_EDICAO;\
echo livro.url $LIVRO_URL
....


.Resultado esperado
....
Protocolo git@github.com:edusantana/calculo-diferencial-e-integral-livro.git
Projeto calculo-diferencial-e-integral-livro
Edição v0.8.2
livro.url http://producao.virtual.ufpb.br/books/edusantana/calculo-diferencial-e-integral-livro/livro/livro.pdf
....

==== Configurando caso o resultado não parecido com o esperado

Nesta seção serão apresentados vários comandos para realizas as atividades, alguns pré-requisitos são necessários:

===== Configurando o protocolo

Caso o protocolo comece com https, quer dizer que precisa ser alterado para algo parecido com:

 git config remote.origin.url git@github.com:edusantana/producao-computacao-ead-ufpb.git


===== Configurando livro.url

O url do livro pdf deve estar configurado

....
git config livro.url http://producao.virtual.ufpb.br/books/.../livro/livro.pdf
....

CAUTION: A maioria dos comandos desta seção espera que você esta dentro da pasta `livro`, onde reside o arquivo `docinfo.xml`.


=== Número da versão

A versão atual do livro é definida dentro do arquivo `livro/docinfo.xml`.

TIP: Um exemplo deste arquivo pode ser visto em: https://github.com/edusantana/producao-computacao-ead-ufpb/blob/master/livro/estrutura-inicial/livro/docinfo.xml.


 <edition>v1.0.0</edition>

=== Preparando o livro para a gráfica

Quando o livro é enviado para a gráfica, marcamos uma ((tag)) no repositório..

==== Verifique pendências de revisão

Busque no texto por TODO, FIXME, XXX e REV. Você pode utilizar o script `git-revisao` para isso.

// TODO adicionar git-revisao ao manual.

==== Verifique pendências no issue track do projeto

Verifique no github do seu projeto se há issue pendentes que devem ser realizados na versão que você está fechando.

==== Verifique as versões anteriores

. Acesse a página do seu prejeto e entre no link `releases`.
. Verifique as últimas versões do livro.

==== Verificar o número da versão

No diretório `livro` (que contém o arquivo `docinfo.xml`), execute o comando:

.Comando para verificar a versão e as revisões dos livros
----
grep '<edition>.*</edition>' docinfo.xml;grep '<revnumber>.*</revnumber>' docinfo.xml
----

WARNING: Certifique-se de que esteja dentro do diretório `livro`, que contem o arquivo `docinfo.xml`.

O resultado esperado é o número da edição, contido no arquivo `livro/docinfo.xml`:

 <edition>v1.0.0</edition>

IMPORTANT: Atualize o número da edição apropriadamente antes de continuar.

==== Atualize o histórico de revisão

O histórico de revisão é importante para que pessoas que já leram o livro
possam saber o que mudou.

    <revision>
      <revnumber>v1.0.0</revnumber>
      <date>Março de 2013</date>
      <authorinitials>Eduardo Santana</authorinitials>
      <revremark>
        Primeira versão do livro.
      </revremark>
    </revision>

O valores de `<revnumber>` devem ser os mesmos assumidos por `<edition>`.

Lembre também de:

* Atualizar a data
* Texto de revremark indicando o que foi alterado.

[[revmark]]
===== Atualizando o revmark e gerando o release notes

O textp do release notes (que será necessário mais adiante) será o
mesmo de `revmark`.

Consulte os títulos do log para gerar o texto de `revmark`,
substituindo `v0.1.0` pela última versão gerada:

.Consultando logs dos commits
....
git log --format="- %s" v0.1.0..HEAD
....

Atualize o `revmark` tomando como base os logs:

.Exemplo de revmark atualizado
....
    <revision>
      <revnumber>v1.0.0</revnumber>
      <date>12/03/2014</date>
      <authorinitials>Eduardo</authorinitials>
      <revremark>
- Como baixar o guia #2
- Atualização do readme #2
- Comando curl para baixar livros ficando melhor no pdf #2
- Mudança de repositório #2
- Inclusão de banco-de-dados-livro
- Se acessar webconf fora do horário
- Comando único para baixar todos livros
- Reformulação do guia para a WebConferência de Produção dos Livros #2
      </revremark>
    </revision>
....

==== Atualize a ficha catalográfica

* Atualize a edição da ficha catalográfica
* Atualize a quantidade de páginas na ficha
* Gere o arquivo `editora.pdf`


[[sec_alteracoes_pendentes]]
==== Verificando se há alterações pendentes

.Comando para verificar se há alterações não enviadas
----
git status -s -b
----

.Enviando alterações realizadas
----
git commit --interactive; git push
----

==== Gerando o livro

Antes de aplicar a tag é importante gerar novamente o livro, para se certificar
que as alterações foram incorporadas.

// FIXME corrigir comando abaixo

----
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`;\
~/bin/git-producao "Gerando livro $LIVRO_EDICAO"
----


==== Aplicando uma tag

WARNING: Antes de aplicar uma tag você deve se certificar que não há
alterações não comitadas (<<sec_alteracoes_pendentes>>). 

A tag aplicada será o resultado do comando:

.Visualizar edição do livro
----
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`; echo Edição do livro: $LIVRO_EDICAO
----

O comando a seguir irá aplicar uma tag, será solicitado informar uma mensagem
ao cadastrar a tag.

.Comando para aplicar a tag
----
echo "Aplicando tag...";\
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`;\
git tag -a $LIVRO_EDICAO -m "Gerando versão $LIVRO_EDICAO";git tag
----

IMPORTANT: A aplicação de tag é uma operação no repositório local, será 
necessário submeter a tag para o github depois (<<git_tag_push>>).


[[git_tag_excluir]]
==== Excluindo uma tag

Caso você tenha criado uma tag e deseja excluí-la, utilize o seguinte comando:

----
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`;git tag -d $LIVRO_EDICAO;git tag
----

NOTE: É seguro criar e remover uma tag em seguida.

==== Verificando a tag aplicada

----
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`; git show $LIVRO_EDICAO
----

[[git_tag_push]]
==== Submetendo tag para o github

----
git push origin --tags
----

=== Gerando versão do livro

IMPORTANT: Por enquanto não foi implementado nenhum controle para gerar o livro numa versão fora da HEAD.

Gere o livro novamente.

[CAUTION]
====
Antes de executar os comandos a seguir certifique-se que passou no testes da configuração (<<sec_versao_config_teste>>).
====

CAUTION: Baixe o livro utilizando o  `wget link-do-livro.pdf` para evitar problemas com chache no navegador.
O repositório precisa está configurado com *SSH*.

[NOTE]
====
Renomei o arquivo para o seguinte nome: disciplina-livro-vX.Y.Z.pdf

.Comandos para baixar e renomear o livro
....
PROJECT=`git config --get remote.origin.url | cut -f 2 -d / | cut -f 1 -d .`;\
LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`;\
LIVRO_URL=`git config --get livro.url`;\
mkdir -p ~/releases/$PROJECT;\
cd ~/releases/$PROJECT;\
rm -rf livro.pdf;\
wget $LIVRO_URL;\
mv livro.pdf $PROJECT-$LIVRO_EDICAO.pdf
....

====


[[github_release]]
=== Disponibilizando a release do livro

NOTE: Ajuda sobre como disponibilizar o livro nas releases do github: https://help.github.com/articles/creating-releases e https://help.github.com/categories/85/articles

. No site do seu projeto no github, acesse o página de *releases*. 
+
--
[NOTE]
====
Uma lista contendo as releases do livro estarão disponíveis lá.
====
--
. Acesse a sua release
. Clique em 'Draft release notes or downloads'
. Baixe o livro gerado
. Renomei o livro colocando o nome do livro e versao (Ex: `nome-do-livro-vX.Y.Z.pdf`)
. Anexo o arquivo pdf neste tela
. Caso o livro não seja um rasculho, marque como 'pré-release'.
. Clique 'Update release'
. Atualize o texto de release com o conteúdo de revmark (<<revmark>>)

==== Atualizando livros.txt

Atualize
https://github.com/edusantana/guia-geral-ead-computacao-ufpb/edit/master/livro/capitulos/shared/livros.txt[livros.txt]
que mantém atualizando todas as últimas releases de livros do curso.

==== Publicando atualização no facebook do curso

Toda vez que uma nova release é gerada deve ser gerado uma publicação
no
https://www.facebook.com/pages/Licenciatura-em-Computa%C3%A7%C3%A3o-a-Dist%C3%A2ncia-UFPB-Virtual/472766296128281?fref=ts[facebook
do curso].



=== Criando estrutura de CD para enviar para a gráfica

(((CD, estrutura)))


==== Criando estrutura inicial do cd

Mensagem para ser gravada no CD-ROM:

.LEIA-ME-GRAFICA.txt
....
Este CD-ROM contém os arquivos necessários para a impressão do(s) livro(s).

* O(s) livro(s) estão organizados em pastas
* O nome da pasta corresponde ao [nome-do-livro]-[versão-do-livro]
* Cada pasta possui:
** Um arquivo 'livro.pdf' que corresponde ao livro
** Um diretório 'capa' contendo a arte da capa do livro

Em caso de dúvia contactar:

Nome do responsável <email@mail.com> 
Telefone: (XX) XXXX-XXXX (operadora)
....

.Comando para preparar 
----
PROJECT=`git config --get remote.origin.url | cut -f 2 -d / | cut -f 1 -d .`

LIVRO_EDICAO=`grep '<edition>.*</edition>' docinfo.xml |xmllint --xpath "string(//edition)" -`

mkdir -p ~/temp/grafica/$PROJECT-$LIVRO_EDICAO/capa

cd ~/temp/grafica

wget https://github.com/edusantana/producao-computacao-ead-ufpb/raw/master/livro/capitulos/code/grafica/LEIA-ME-GRAFICA.txt
----

Atualize o arquivo `LEIA-ME-GRAFICA.txt` para conter os dados de contato apropriados.

==== Copiando os arquivos para dentro dos diretórios

===== Baixe os livros para os diretórios respectivos

Dentro do diretório do livro, baixe o livro.pdf com o wget.

.Baixando o livro
----
wget http://producao.virtual.ufpb.br/books/edusantana/introducao-a-computacao-livro/livro/livro.pdf
----

===== Copie os arquivos das capas

Copie os arquivos das capas dos livros para dentro das pastas correspondentes.

=== Gerando a imagem do cd

(((CD, ISO)))

----
mkisofs -J -R -o ~/temp/grafica-livros.iso  ~/temp/grafica
----

////
Sempre terminar o arquivo com uma nova linha.
////

